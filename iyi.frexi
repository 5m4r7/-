var variables = {
    "pi": 3.14159265358979323846,
    "e": 2.71828182845904523536
};

function evaluateExpression(expression) {
    // 算術式の評価
    // ここで演算子の優先順位を考慮するなど、より高度な機能を追加できます
    return eval(expression);
}

function handleVariableDeclaration(tokens) {
    var varName = tokens[1];

    if (variables[varName] !== undefined) {
        throw new Error("Variable already declared: " + varName);
    }

    if (tokens.length > 2) {
        var value = evaluateExpression(tokens.slice(3).join(" "));
        variables[varName] = value;
    } else {
        variables[varName] = 0.0;  // デフォルト値
    }
}

function handleVariableAssignment(tokens) {
    var varName = tokens[0];
    var value = evaluateExpression(tokens.slice(2).join(" "));
    variables[varName] = value;
}

function handleConditionalStatement(tokens) {
    var condition = evaluateExpression(tokens.slice(1).join(" "));
    var thenIndex = tokens.indexOf("then");

    if (thenIndex === -1) {
        throw new Error("Expected 'then' after condition");
    }

    var trueBranch = tokens.slice(thenIndex + 1).join(" ");
    var falseBranch = "";

    if (condition !== 0.0) {
        evaluateBlock(trueBranch);
    } else {
        var endIndex = tokens.indexOf("end");
        falseBranch = tokens.slice(thenIndex + 1, endIndex).join(" ");
        evaluateBlock(falseBranch);
    }
}

function handleForLoop(tokens) {
    var loopHeader = tokens.slice(0, tokens.indexOf("{") + 1).join(" ");
    evaluateStatement(loopHeader);

    var condition = evaluateExpression(tokens.slice(1).join(" "));
    var doIndex = tokens.indexOf("do");

    if (doIndex === -1) {
        throw new Error("Expected 'do' after condition");
    }

    while (condition !== 0.0) {
        var loopBody = tokens.slice(doIndex + 1, tokens.indexOf("end")).join(" ");
        evaluateBlock(loopBody);
        condition = evaluateExpression(tokens.slice(1).join(" "));
    }
}

function handleFunctionDefinition(tokens) {
    var funcName = tokens[1];

    if (functions[funcName] !== undefined) {
        throw new Error("Function already defined: " + funcName);
    }

    var paramList = [];
    var params = tokens.slice(3, tokens.indexOf("{")).join(" ");
    var funcBody = tokens.slice(tokens.indexOf("{") + 1, tokens.indexOf("end")).join(" ");

    functions[funcName] = {
        params: paramList,
        body: funcBody
    };
}

function handleFunctionReturn(tokens) {
    var result = evaluateExpression(tokens.slice(1).join(" "));
    if (currentFunction !== "") {
        currentFunctionReturnValue = result;
    } else {
        throw new Error("'return' statement outside of a function");
    }
}

function evaluateBlock(block) {
    var lines = block.split("\n");
    for (var i = 0; i < lines.length; i++) {
        evaluateStatement(lines[i]);
    }
}

var functions = {};
var currentFunction = "";
var currentFunctionReturnValue = 0.0;

function run() {
    console.log("C/JavaScript/Go-Like Language Interpreter");
    console.log("Type 'quit' to exit.");

    while (true) {
        var input = prompt("> ");

        if (input === "quit") {
            break;
        }

        try {
            evaluateStatement(input);
        } catch (error) {
            console.error("Error: " + error.message);
        }
    }
}

function evaluateStatement(statement) {
    var tokens = statement.trim().split(" ");
    var command = tokens[0];

    switch (command) {
        case "var":
            handleVariableDeclaration(tokens);
            break;
        case "if":
            handleConditionalStatement(tokens);
            break;
        case "for":
            handleForLoop(tokens);
            break;
        case "func":
            handleFunctionDefinition(tokens);
            break;
        case "return":
            handleFunctionReturn(tokens);
            break;
        default:
            if (variables[command] !== undefined) {
                handleVariableAssignment(tokens);
            } else {
                throw new Error("Invalid statement: " + statement);
            }
    }
}

run();
